Admin
-----
Make migration before loggin in the admin panel for the first time.


Models
------
DateTimeField
-------------
Suppose in a Post model we have a field named date_posted.
if we use, date_posted = models.DateTimeField(auto_now=True),
it will take the current time and will get updated when we update the post.

if we use, date_posted = models.DateTimeField(auto_now_add=True),
it will take the current time but date can never be changed.

Best option:
from django.utils import timezone

class Post(models.Model):
    date_posted = models.DateTimeField(default=timezone.now)

# Notice, use didn't use parenthesis after timezone.now.
By this we are not executing timezone.now function at this point,
instead, we are just passing the funtion as default value.

Interactive Console
-------------------
# We can import and use django objects with shell.
python manage.py shell

from blog.models import Post
from django.contrib.auth.models import User

User.objects.all()  # Returns QuerySet with all users
User.objects.first()  # Returns the first user
User.objects.filter(username='john')  # Returns QuerySet with all users after filtering
User.objects.filter(username='john').first()  # Returns the first user after filtering

user = User.objects.filter(username='john').first()  # Saving the result in a variable
user.id  # Returns the id of the user, i.e. 1
user.pk  # Returns the primary key of the user, i.e. 1

user = User.objects.get(id=1)  # Returns the user with that id.

post_1 = Post(title='Blog 1', content='1st Post Content', author=user)
post_1.save()  # Commit the post to the database
Post.objects.all()  # Returns QuerySet with all the posts.

# author_id can also be used instead of author while creating the post
post_2 = Post(title='Blog 1', content='1st Post Content', author_id=user.id)
post_1.save()
Post.objects.all()



Migration
---------
See the SQL code that a migration file executes in the backend
------------------------------------------------------------------
Example: python manage.py sqlmigrate blog 001
Syntax: python manage.py sqlmigrate app_name migration_file_number



Routing
-------
In urls.py, we use a trailing slash after every route in the urlpatters, to avoid confusion.
urlpatterns = [
    path('about/', views.about, name='blog-about'),
]


Template Inheritance
--------------------
In file.html during template inheritance, end a block by {% endblock block_name %} to avoid confusion.
You can also use just {% endblock %}, but mentioning the name will help while ending multiple blocks.


Hard Reload of Browser
----------------------
In Windows, Ctrl + F5
In Mac, Cmd + Shift + R
