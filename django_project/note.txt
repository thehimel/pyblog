Admin
-----
Make migration before logging in the admin panel for the first time.

# To control models from admin page, we need to register models in the app/admin.py
from blog.models import Post
admin.site.register(Post)


Models
------
DateTimeField
-------------
Suppose in a Post model we have a field named date_posted.
if we use, date_posted = models.DateTimeField(auto_now=True),
it will take the current time and will get updated when we update the post.

if we use, date_posted = models.DateTimeField(auto_now_add=True),
it will take the current time but date can never be changed.

Best option:
from django.utils import timezone

class Post(models.Model):
    date_posted = models.DateTimeField(default=timezone.now)

# Notice, use didn't use parenthesis after timezone.now.
By this we are not executing timezone.now function at this point,
instead, we are just passing the funtion as default value.

Interactive Console
-------------------
# We can import and use django objects with shell.
python manage.py shell

from blog.models import Post
from django.contrib.auth.models import User

User.objects.all()  # Returns QuerySet with all users
User.objects.first()  # Returns the first user
User.objects.filter(username='john')  # Returns QuerySet with all users after filtering
User.objects.filter(username='john').first()  # Returns the first user after filtering

user = User.objects.filter(username='john').first()  # Saving the result in a variable
user.id  # Returns the id of the user, i.e. 1
user.pk  # Returns the primary key of the user, i.e. 1

user = User.objects.get(id=1)  # Returns the user with that id.

# date_posted field is not required to be declared as it will be saved automatically.
post_1 = Post(title='Blog 1', content='1st Post Content', author=user)
post_1.save()  # Commit the post to the database
Post.objects.all()  # Returns QuerySet with all the posts.

# author_id can also be used instead of author while creating the post
post_2 = Post(title='Blog 1', content='1st Post Content', author_id=user.id)
post_1.save()
Post.objects.all()

post = Post.objects.first()  # Returns the first post
post.content  # Returns the content of the selected post
post.date_posted()  # Returns the DateTime object
post.author  # Returns the user object
post.author.email  # Returns the email of that author

user.post_set.all()  # Returns QuerySet with all posts created by this user
Syntax: user.modelName_set.all()

# Create a post directly using post_set
# External .save() is not required as it will commit automatically.
user.post_set.create(title='Blog 3', content='3rd Blog Content')

exit()



Migration
---------
See the SQL code that a migration file executes in the backend
------------------------------------------------------------------
Example: python manage.py sqlmigrate blog 001
Syntax: python manage.py sqlmigrate app_name migration_file_number


views.py
--------
Flash Messages
--------------
In form view we can define flash messages to be shown on the user's end.
from django.contrib import messages

Types of Messages:
messages.info
messages.success
messages.warning
messages.error
messages.debug

Example:
Backend Code in views.py
if form.is_valid():
    messages.success(request, f'Account created for {username}!')

Frontend clode in the html file:
Django flash messages and Bootstrap alert has similaries.
i.e. alert-info, alert-success, alert-warning
message.tags will be replaced with given info/success/warning/error/debug etc.

{% if messages %}
    {% for message in messages %}
        <div class='alert alert-{{ message.tags }}'>
            {{ message }}
        </div>
    {% endfor %}
{% endif %}


Routing
-------
In urls.py, we use a trailing slash after every route in the urlpatters, to avoid confusion.
urlpatterns = [
    path('about/', views.about, name='blog-about'),
]


Template Inheritance
--------------------
In file.html during template inheritance, end a block by {% endblock block_name %} to avoid confusion.
You can also use just {% endblock %}, but mentioning the name will help while ending multiple blocks.


Template
--------
If you print the DateTimeField object in the template, you'll see the default formatting.
But we can use custome filtering as mentioned in https://docs.djangoproject.com/en/3.0/ref/templates/builtins/#date
Example: {{ post.date_posted|date:"F d, Y" }}
This prints like January 01, 2020


Hard Reload of Browser
----------------------
In Windows, Ctrl + F5
In Mac, Cmd + Shift + R


External Apps
-------------
crispy forms
------------
This is used to style django forms.
pip install django-crispy-forms

settings.py
INSTALLED_APPS = [
    ...
    'crispy_forms',
    ...
]
